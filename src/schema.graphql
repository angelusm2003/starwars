type ApiRoot {
  films: [Film]
  characters: [Character]
  planets: [Planet]
  species: [Species]
  startships: [Starship]
  vehicles: [Vehicle]
  combinedData: [CombinedData]
}

type Film {
  id: ID!
  title: String!
  episodeID: Int
  director: String
  producer: String
  releaseDate: String
  characters: [Character]!
  planets: [Planet]
  starships: [Starship]
  vehicles: [Vehicle]
  species: [Species]
}
 
type Character {
  id: ID!
  name: String!
  height: String
  mass: String
  hairColor: String
  skinColor: String
  eyeColor: String
  birthYear: String
  gender: String
  homeworld: Planet
  films: [Film]!
  species: [Species]
  starships: [Starship]
  vehicles: [Vehicle]
}

type Planet {
  id: ID!
  name: String!
  diameter: String
  rotationPeriod: String
  orbitalPeriod: String
  gravity: String
  population: String
  climate: String
  terrain: String
  surfaceWater: String
  residents: [Character]
  films: [Film]
}

type Vehicle {
  id: ID!
  name: String!
  model: String
  manufacturer: String
  costInCredits: String
  length: String
  maxAtmospheringSpeed: String
  crew: String
  passengers: String
  cargoCapacity: String
  consumables: String
  vehicleClass: String
  pilots: [Character]
  films: [Film]
}

type Starship {
  id: ID!
  name: String!
  model: String
  manufacturer: String
  costInCredits: String
  length: String
  maxAtmospheringSpeed: String
  crew: String
  passengers: String
  cargoCapacity: String
  consumables: String
  hyperdriveRating: String
  MGLT: String
  starshipClass: String
  pilots: [Character]
  films: [Film]
}

type Species {
  id: ID!
  name: String!
  classification: String
  designation: String
  averageHeight: String
  averageLifespan: String
  eyeColors: String
  hairColors: String
  skinColors: String
  language: String
  homeworld: Planet
  people: [Character]
  films: [Film]
}

type CombinedData {
  characterCount: Int!
  localCharacterNames: [String!]!
}

type Query {
  root: ApiRoot
  # Obtener un personaje por ID
  character(id: ID!): Character
  # Obtener una película por ID
  getFilm(id: ID!): Film
  # Obtener una nave espacial por ID
  starship(id: ID!): Starship
  # Obtener un vehículo por ID
  vehicle(id: ID!): Vehicle
  # Obtener un planeta por ID
  planet(id: ID!): Planet
  species(id: ID!): Species
  combinedData: CombinedData!
}

type Mutation {
  # Crear un nuevo personaje
  createCharacter(input: CharacterInput!): Character
  # Actualizar los datos de un personaje existente
  updateCharacter(id: ID!, input: CharacterInput!): Character
  # Eliminar un personaje por ID
  deleteCharacter(id: ID!): ID
  ########
  updateFilm(id: ID!, title: String!, director: String!): Film
  ########
}

input CharacterInput {
  name: String!
  height: String
  mass: String
  hairColor: String
  skinColor: String
  eyeColor: String
  birthYear: String
  gender: String
}
